'''
Interface
-takes hex and doesn't convert it because xor function also takes hex
-xor passes back hex so this is also acceptable
END INTERFACE
- takes the hex and converts it to bytes
- has already determined dictionary of HEX keys to percent frequency 
- dictionary of empty count
- dictionary of empty percentages
- counts the number of character values and sends them to the count
- takes the count and divides by the lenght of the cipher text and adds those to the percentages
- starts take the cipher text and xor it by numbers 0-255 then repeat the above
- adds in that it takes the percentage of known english values subtracted from the percentagages
and adds that to the new dictionary same as count called residuals
-at end takes the numerical key in the for loop and adds it to the dictionary sums the residuals
and passes back the smallest one
'''
from textwrap import wrap
from xor_main import *
def freq_analysis(ciphertext):
	known_freqs = {'41': 8.167, '42': 1.492, '43': 2.782, '44': 4.253, '45': 12.702, '46': 2.228, '47': 2.015, '48': 6.094, '49': 6.966, '4A': 0.153, '4B': 0.772, '4C': 4.025, '4D': 2.406, '4E': 6.749, '4F': 7.507, '50': 1.929, '51': 0.095, '52': 5.987, '53': 6.327, '54': 9.056, '55': 2.758, '56': 0.978, '57': 2.360, '58': 0.150, '59': 1.974, '5A': 0.074, '20': 16.523}
	# cipher_bytes = bytes.fromhex(ciphertext)
	final = dict()

	for i in range(255):
		residuals = {'41': 0, '42': 0, '43': 0, '44': 0, '45': 0, '46': 0, '47': 0, '48': 0, '49': 0, '4A': 0, '4B': 0, '4C': 0, '4D': 0, '4E': 0, '4F': 0, '50': 0, '51': 0, '52': 0, '53': 0, '54': 0, '55': 0, '56': 0, '57': 0, '58': 0, '59': 0, '5A': 0, '20': 0}
		count = {'41': 0, '42': 0, '43': 0, '44': 0, '45': 0, '46': 0, '47': 0, '48': 0, '49': 0, '4A': 0, '4B': 0, '4C': 0, '4D': 0, '4E': 0, '4F': 0, '50': 0, '51': 0, '52': 0, '53': 0, '54': 0, '55': 0, '56': 0, '57': 0, '58': 0, '59': 0, '5A': 0, '20': 0}
		percents = {'41': 0, '42': 0, '43': 0, '44': 0, '45': 0, '46': 0, '47': 0, '48': 0, '49': 0, '4A': 0, '4B': 0, '4C': 0, '4D': 0, '4E': 0, '4F': 0, '50': 0, '51': 0, '52': 0, '53': 0, '54': 0, '55': 0, '56': 0, '57': 0, '58': 0, '59': 0, '5A': 0, '20': 0}
		# Got really annoyed with defining different cases, so I made an equation.
		if (len(str(i)) % 2) != 0:
			xored = xor(ciphertext, str(i).zfill(len(str(i))+ 1))
		else:
			xored = xor(ciphertext, str(i))

		cut_string = wrap(xored, 2)
		for hex_char in cut_string:
			if hex_char in count:
				count[hex_char] += 1

		for selected in count:
			number_counted = count[selected]
			hex_len = len(cut_string)
			if selected in percents:
				percents[selected] = number_counted / hex_len

		for picked in residuals:
			residuals[picked] = (count[picked] - known_freqs[picked]) ** 2
			final[i] = sum(residuals.values())

		# print(xored)

	import operator
	sorted_x = sorted(final.items(), key=operator.itemgetter(1))
	print(sorted_x[0])

	# print(final)

if __name__ == "__main__":
	freq_analysis("7d7a623566797a62796c35617d7035617c787035657466667066357d7067703935707b767a78657466667071357466357c35747835776c3573677a666135747b7135667b7a6234356c70613574356670767a7b713566617065357c663561747e707b35617a627467716635786c35707b61706765677c66703b357c357d746370357d7c67707135743563706666707935747b71357478357a767660657c7071357c7b35767a79797076617c7b7235786c3566747c797a67662e35617d7a667035627d7a78357c357d746370357479677074716c35707b72747270713574656570746735617a3577703578707b357a7b35627d7a78357c3576747b35717065707b7135747b71357467703576706761747c7b796c35657a66667066667071357a73357174607b617970666635767a60677472703b776061357c357d746370357a7b703562747b6135627d7c767d357c357d746370357b70637067356c7061357770707b357477797035617a356674617c66736c3935747b7135617d7035747766707b7670357a7335617d70357a777f707661357a7335627d7c767d357c357b7a623573707079357466357435787a6661356670637067703570637c7939357c357d746370357b7a3573677c707b71393578746772746770612f35627d707b357c3574783572797a627c7b7235627c617d35617d7035707b617d60667c746678357a7335666076767066663935617d70677035627c7979357770357b7a7b7035617a35657467617c767c6574617035786c357f7a6c2e357c73357c35747835746666747c79707135776c35717c667465657a7c7b6178707b6139357b7a357a7b7035627c797935707b717074637a606735617a3566606661747c7b357870357c7b3571707f7076617c7a7b3b357c35667d74797935767a78787c6135786c35617d7a60727d616635617a35657465706739357c61357c6635616760702e3577606135617d7461357c66357435657a7a67357870717c607835737a6735617d7035767a7878607b7c7674617c7a7b357a7335737070797c7b723b357c357170667c677035617d7035767a7865747b6c357a7335743578747b35627d7a35767a60797135666c786574617d7c667035627c617d3578703935627d7a667035706c706635627a60797135677065796c35617a35787c7b703b356c7a603578746c357170707835787035677a78747b617c763935786c357170746735667c666170673935776061357c35777c61617067796c357370707935617d703562747b61357a7335743573677c707b713b357c357d746370357b7a357a7b70357b707467357870393572707b617970356c706135767a60677472707a60663935657a66667066667071357a73357435766079617c63746170713574663562707979357466357a7335743576746574767c7a606635787c7b713935627d7a6670356174666170663574677035797c7e7035786c357a627b3935617a35746565677a6370357a67357478707b71786c356579747b663b357d7a6235627a607971356660767d35743573677c707b7135677065747c6735617d7035737460796166357a73356c7a606735657a7a673577677a617d706734357c35747835617a7a35746771707b61357c7b35706d707660617c7a7b35747b7135617a7a357c786574617c707b61357a7335717c73737c766079617c70663b35776061357c61357c6635743566617c797935726770746170673570637c7935617a35787035617d7461357c35747835667079733870716076746170712f35737a6735617d7035737c67666135737a60676170707b356c70746766357a7335786c35797c7370357c3567747b35627c7971357a7b357435767a78787a7b35747b713567707471357b7a617d7c7b7235776061357a606735607b76797035617d7a7874663535777a7a7e66357a7335637a6c747270663b35746135617d746135747270357c357770767478703574766460747c7b61707135627c617d35617d70357670797077677461707135657a706166357a73357a6067357a627b35767a607b61676c2e35776061357c6135627466357a7b796c35627d707b357c61357d74713576707466707135617a7770357c7b35786c35657a62706735617a357170677c6370357c616635787a6661357c78657a6761747b613577707b70737c61663573677a78356660767d357435767a7b637c76617c7a7b35617d7461357c3565706776707c63707135617d70357b70767066667c616c357a73357770767a787c7b723574766460747c7b61707135627c617d35787a67703579747b72607472706635617d747b35617d7461357a7335786c357b74617c637035767a607b61676c3b357b7a62357c357478356162707b616c38707c727d6135747b71357478357c7b35677074797c616c35787a6770357c79797c61706774617035617d747b3578747b6c3566767d7a7a79777a6c66357a7335737c736170707b3b357c61357c66356167607035617d7461357c357d74637035617d7a60727d6135787a677035747b7135617d746135786c3571746c7167707478663574677035787a677035706d61707b71707135747b71357874727b7c737c76707b61393577606135617d706c3562747b61353d746635617d703565747c7b617067663576747979357c613c357e7070657c7b722e35747b71357c357267707461796c357b70707135743573677c707b7135627d7a35627a607971357d7463703566707b667035707b7a60727d357b7a6135617a35717066657c667035787035746635677a78747b617c763935747b71357473737076617c7a7b35707b7a60727d35737a6735787035617a35707b717074637a606735617a35677072607974617035786c35787c7b713b627079793935617d70667035746770356066707970666635767a786579747c7b61662e357c35667d7479793576706761747c7b796c35737c7b71357b7a3573677c707b71357a7b35617d7035627c7170357a7670747b39357b7a67357063707b357d706770357c7b357467767d747b727079393574787a7b7235787067767d747b616635747b713566707478707b3b356c706135667a787035737070797c7b72663935607b7479797c707135617a35617d703571677a6666357a73357d6078747b357b7461606770393577707461357063707b357c7b35617d7066703567607272707135777a667a78663b35786c35797c706061707b747b613935737a67357c7b6661747b767039357c6635743578747b357a7335627a7b71706773607935767a606774727035747b7135707b61706765677c66702e7d70357c6635787471796c357170667c677a6066357a733572797a676c39357a67356774617d70673935617a35627a677135786c35657d6774667035787a677035767d746774766170677c66617c767479796c39357a7335747163747b767078707b61357c7b357d7c663565677a737066667c7a7b3b357d70357c6635747b35707b72797c667d78747b3935747b71357c7b35617d7035787c716661357a73357b74617c7a7b747935747b713565677a737066667c7a7b7479356567707f60717c7670663935607b667a7361707b707135776c35766079617c6374617c7a7b3935677061747c7b6635667a7870357a7335617d70357b7a777970666135707b717a6278707b6166357a73357d6078747b7c616c3b357c35737c676661357770767478703574766460747c7b61707135627c617d357d7c78357a7b35777a746771357435627d747970356370666670792e35737c7b717c7b7235617d7461357d703562746635607b707865797a6c7071357c7b35617d7c6635767c616c39357c357074667c796c35707b7274727071357d7c7835617a357466667c6661357c7b35786c35707b61706765677c66703b")
